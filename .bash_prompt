#!/usr/bin/env bash

#######################
## Prompt Settings----
#######################
# Set prompt
# PS1=\[\\u@`hostname | sed 's/\.awarix\.com$//g'`\]\ \\!' '
# If id command returns zero, you have root access.
if [ $(id -u) -eq 0 ];
then # you are root, set red colour prompt
  PS1="\\[$(tput setaf 1)\\]\\u@\\h:\\w #\\[$(tput sgr0)\\]"
else # normal
  #PS1="\e[0;32m[\u@\h \W]\$ \e[m"
  #PS1="[\\u@\\h:\\w] $"
  #PS1="\n\[\e[32;1m\](\[\e[37;1m\]\u\[\e[32;1m\])-(\[\e[37;1m\]jobs:\j\[\e[32;1m\])-(\[\e[37;1m\]\w\[\e[32;1m\])\n(\[\[\e[37;1m\]! \!\[\e[32;1m\])-> \[\e[0m\]"
  #PS1="\n\[\e[30;1m\](\[\e[34;1m\]\u@\h\[\e[30;1m\])-(\[\e[34;1m\]\t\[\e[30;1m\])\[\e[30;1m\]-(\[\e[32;1m\]\w\[\e[30;1m\])-(\[\e[32;1m\]\$(/bin/ls -1 | /usr/bin/wc -l | /usr/bin/sed 's: ::g') files, \$(/bin/ls -lah | /usr/bin/grep -m 1 total | /usr/bin/sed 's/total //')b\[\e[30;1m\])-> \[\e[0m\]\n"
   PS1="\n\[\e[30;1m\](\[\e[34;1m\]\u@\h\[\e[30;1m\])-(\[\e[34;1m\]\t\[\e[30;1m\])\[\e[30;1m\]-(\[\e[32;1m\]\w\[\e[30;1m\])-(\[\e[32;1m\]\$(/usr/bin/ls -1 | /usr/bin/wc -l | /usr/bin/sed 's: ::g') files, \$(/usr/bin/ls -lah | /usr/bin/grep -m 1 total | /usr/bin/sed 's/total //')b\[\e[30;1m\])-> \[\e[0m\]\n"
fi

# Append previous command to history, initial prompt_command
PROMPT_COMMAND='history -a'

## Eternal Bash History https://debian-administration.org/article/543/Bash_eternal_history
# The first line sets the format of history lines to include the date as a Unix timestamp,
# so you can now when you typed every command. The second line, which is the core of the
# solution, first ensures that, if a previous PROMPT_COMMAND was set, it gets executed
# before our stuff and then appends a line of the format:
#     PID USER INDEX TIMESTAMP COMMAND
# to a file called .bash_eternal_history in the current user home.
# export HISTTIMEFORMAT="%s "
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ; }"'echo $$ $USER \
               "$(history 1)" >> ~/.bash_eternal_history'


# EOF
