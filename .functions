# Define handy functions

export DOCKER_REPO_PREFIX=$USER

#pandoc(){
#	local file=${*: -1}
#	local lfile
#	lfile=$(readlink -m "$(pwd)/${file}")
#	local rfile
#	rfile=$(readlink -m "/$(basename "$file")")
#	local args=${*:1:${#@}-1}

#	docker run --rm \
#		-v "${lfile}:${rfile}" \
#		-v /tmp:/tmp \
#		--name pandoc \
#		${DOCKER_REPO_PREFIX}/pandoc "${args}" "${rfile}"
#}

#function startx() {
#    if [ -z "$(ps -ef|grep XQuartz|grep -v grep)" ] ; then
#        open -a XQuartz
#        socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" &
#    fi
#}


function t10() {
    ps axo rss,comm,pid | awk '{ proc_list[$2]++; proc_list[$2 "," 1] += $1; } \
    END { for (proc in proc_list) { printf("%d\t%s\n", \
    proc_list[proc "," 1],proc); }}' | sort -n | tail -n 10 | sort -rn \
    | awk '{$1/=1024;printf "%.0fMB\t",$1}{print $2}'
}

function mcdir() {
  mkdir -p $1 && cd $1
}

function b() {
    cd .. && pwd
}

function bb() {
    cd ../.. && pwd
}

function rmd() {
	rm -rf ${1+"$@"}
}

function pd() {
    pushd ${1+"$@"}
}

function kick() {
	test -z ${1} && echo "error: no user specified." && return
	ps aux | grep "${1}" | awk '{printf $2 " "}' | xargs kill
}

function crlf() {
    cat ${1+"$@"} | tr '\r' '\n'
}

function h() {
    history ${1+"$@"}
}

function hd() {
    hexdump -C ${1+"$@"}
}

function la() {
    /bin/ls -a ${1+"$@"}
}

function ll() {
    /bin/ls -l ${1+"$@"}
}

function recv() {
    netcat -l -p 6060 | tar --extract --verbose --file - --unlink ${1+"$@"}
}

function t() {
    less ${1+"$@"}
}

function tz() {
    gunzip < ${1+"$@"} | less
}

function remove() {
    test -e ${1} && find . -type f -name "${1}" -exec rm -f {} \;
}

function grepj() {
    find . -name "*.java" -exec grep ${@+"$@"} {} \;
}

function epatch() {
    trap -- 'catch_errors' ERR
    extended-patch -p0 < ${1+"$@"}
}

function ediff() {
    for FILE in ${1+"$@"}; do
        cleanblanks -t $FILE
    done
    extended-diff ${1+"$@"} | vi -
}

function catch_errors() {
    echo "script aborted because of errors";
}

function killscreens() {
    screen -ls | grep Detached | cut -d. -f1 | awk '{print $1}' | xargs kill
}

function killd() {
    for session in $(screen -ls | grep -v Socket | grep -o '[0-9]\{3,\}')
    do
        screen -S "${session}" -X quit;
    done
}

function parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f "$1" ] ; then
        local nameInLowerCase=`echo "$1" | awk '{print tolower($0)}'`
        case "$nameInLowerCase" in
          *.tar.bz2)   tar xvjf ./"$1"    ;;
          *.tar.gz)    tar xvzf ./"$1"    ;;
          *.tar.xz)    tar xvJf ./"$1"    ;;
          *.lzma)      unlzma ./"$1"      ;;
          *.bz2)       bunzip2 ./"$1"     ;;
          *.rar)       unrar x -ad ./"$1" ;;
          *.gz)        gunzip ./"$1"      ;;
          *.tar)       tar xvf ./"$1"     ;;
          *.tbz2)      tar xvjf ./"$1"    ;;
          *.tgz)       tar xvzf ./"$1"    ;;
          *.zip)       unzip ./"$1"       ;;
          *.Z)         uncompress ./"$1"  ;;
          *.7z)        7z x ./"$1"        ;;
          *.xz)        unxz ./"$1"        ;;
          *.exe)       cabextract ./"$1"  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
fi
}

ipif() {
    if pcregrep -M "(([1-9]\d{0,2})\.){3}(?2)" <<< "$1"; then
	curl ipinfo.io/"$1"
    else
	ipawk=($(host "$1" | awk '/address/ { print $NF }'))
	curl ipinfo.io/${ipawk[1]}
    fi
    echo
}

man() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
			man "$@"
}

#update() {
#    # Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, rvm, Python, and their installed packages
#    sudo -H softwareupdate -i -a
#    brew update
#    brew upgrade
#    brew cleanup
#    npm -g install npm@latest
#    npm update -g
#    gem update --system
#    gem update
#    pip install --upgrade pip setuptools
#    pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U
#}

function setproxy() {
    export {http,https,ftp}_proxy='http://localhost:1080'
}

function unsetproxy() {
    unset {http,https,ftp}_proxy
}

# print the header (the first line of input)
# and then run the specified command on the body (the rest of the input)
# use it in a pipeline, e.g. ps | body grep somepattern
body() {
    IFS= read -r header
    printf '%s\n' "$header"
    "$@"
}

